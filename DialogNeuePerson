import tkinter as tk
from tkinter import ttk, messagebox
import re
import csv

# dialogboxen werden erstellt
class DialogNeuePerson(tk.Toplevel):
    def __init__(self, elternteil, bearbeiten=False, personenDaten=None):
        super().__init__(elternteil)
        self.elternteil = elternteil
        self.bearbeiten = bearbeiten
        self.personenDaten = personenDaten

        # Titel vom poup erstellen
        self.title("Neue Person anlegen" if not bearbeiten else "Person bearbeiten")

        # hier werden eine Art ID der entsprechenden Textbox abgefragt
        print("Vornameinfo",tk.StringVar())
        self.vornameInfo = tk.StringVar()
        self.nachnameInfo = tk.StringVar()
        self.strasseInfo = tk.StringVar()
        self.plzInfo = tk.StringVar()
        self.ortInfo = tk.StringVar()
        self.telefonnummerInfo = tk.StringVar()
        self.emailInfo = tk.StringVar()

        # Methode, die die GUI anzeigt wird aufgerufen
        self.erstelleGUI()

        # If-statment; prüft ob Daten neu eingegeben oder editiert werden sollen
        if bearbeiten and personenDaten:
            self.vornameInfo.set(personenDaten[0])
            self.nachnameInfo.set(personenDaten[1])
            self.strasseInfo.set(personenDaten[2])
            self.plzInfo.set(personenDaten[3])
            self.ortInfo.set(personenDaten[4])
            self.telefonnummerInfo.set(personenDaten[5])
            self.emailInfo.set(personenDaten[6])

    # Methode, die die popup GUI erstellt
    def erstelleGUI(self):
        self.geometry("400x400")

        #  Label-Text "Vorname" anzeigen. Beschriftung für das Textfeld tk.Entry
        labelVorname = tk.Label(self, text="Vorname:")

        # grid wird verwendet, um das tk.Label-Widget
        # mit dem Namen "labelVorname" im übergeordneten Widget
        # zu platzieren. grid ist eine der drei Methoden in tkinter,
        # die zum Positionieren von Widgets verwendet werden können
        labelVorname.grid(row=0, column=0, padx=10, pady=(10, 0))

        # tk.Entry ist ein Widget in tkinter , das ein Textfeld
        # darstellt. Der Benutzer kann Text eingeben oder bearbeiten.
        entryVorname = tk.Entry(self, textvariable=self.vornameInfo)
        entryVorname.grid(row=0, column=1, padx=10, pady=(10, 0))

        labelNachname = tk.Label(self, text="Nachname:")
        labelNachname.grid(row=1, column=0, padx=10, pady=5)
        entryNachname = tk.Entry(self, textvariable=self.nachnameInfo)
        entryNachname.grid(row=1, column=1, padx=10, pady=5)

        labelStrasse = tk.Label(self, text="Straße:")
        labelStrasse.grid(row=2, column=0, padx=10, pady=5)
        entryStrasse = tk.Entry(self, textvariable=self.strasseInfo)
        entryStrasse.grid(row=2, column=1, padx=10, pady=5)

        labelPLZ = tk.Label(self, text="PLZ:")
        labelPLZ.grid(row=3, column=0, padx=10, pady=5)
        entryPLZ = tk.Entry(self, textvariable=self.plzInfo)
        entryPLZ.grid(row=3, column=1, padx=10, pady=5)

        labelOrt = tk.Label(self, text="Ort:")
        labelOrt.grid(row=4, column=0, padx=10, pady=5)
        entryOrt = tk.Entry(self, textvariable=self.ortInfo)
        entryOrt.grid(row=4, column=1, padx=10, pady=5)

        labelTelefonnummer = tk.Label(self, text="Telefonnummer:")
        labelTelefonnummer.grid(row=5, column=0, padx=10, pady=5)
        entryTelefonnummer = tk.Entry(self, textvariable=self.telefonnummerInfo)
        entryTelefonnummer.grid(row=5, column=1, padx=10, pady=5)

        labelEmail = tk.Label(self, text="E-Mail:")
        labelEmail.grid(row=6, column=0, padx=10, pady=5)
        entryEmail = tk.Entry(self, textvariable=self.emailInfo)
        entryEmail.grid(row=6, column=1, padx=10, pady=5)

        buttonFrame = tk.Frame(self)
        buttonFrame.grid(row=7, columnspan=2, pady=(20, 0))
        okButton = tk.Button(buttonFrame, text="OK", command=self.onOkButtonClick)
        okButton.pack(side=tk.LEFT, padx=5)
        abbrechenButton = tk.Button(buttonFrame, text="Abbrechen", command=self.destroy)
        abbrechenButton.pack(side=tk.LEFT, padx=5)

    def validateTelefonNummer(self, telefonNummer):
        # ^: Steht für den Anfang des Strings.Stellt sicher, dass der gesamte String mit dem Muster übereinstimmt.
        # $: Steht für das Ende des Strings.
        # [\d/-]+: [\d] ist eine Zeichenklasse, die jede Ziffer von 0 bis 9.
        # [-/] ist eine Zeichenklasse, die entweder "-" oder "/" erlaubt.
        # Das "+" bedeutet, dass mindestens solch ein Zeichen vorhanden sein muss.
        return re.match(r"^[\d/-]+$", telefonNummer)

    def validatePLZ(self, plz):
        # ^: Steht für den Anfang des Strings. Es stellt sicher,
        # dass der gesamte String mit dem Muster übereinstimmt.
        # $: Steht für das Ende des Strings.
        # \d{5}: \d ist eine spezielle Sequenz, die jede Ziffer
        # von 0 bis 9 repräsentiert. {5} gibt an, dass genau
        # fünf aufeinanderfolgende Ziffern vorhanden sein müssen.
        return re.match(r"^\d{5}$", plz)

    def validatEmail(self, email):
        # [^@]+: Steht für eine Stringklasse, die jedes Zeichen
        # außer dem Zeichen @ darstellt. Das + bedeutet, dass
        # mindestens ein solches Zeichen vorhanden sein muss
        # @: Steht für das Zeichen @ in der E-Mail-Adresse.
        # \.: Steht für das Zeichen ".". Da der Punkt eine
        # spezielle Bedeutung hat, wird er mit \ maskiert
        # [^@]+: Noch eine Zeichenklasse, jedes Zeichen außer @.
        return re.match(r"[^@]+@[^@]+\.[^@]+", email)

    # Wenn der OK Button beim popup geklickt wird
    def onOkButtonClick(self):
        # die Variablen wurden im Konstruktor (__init__) deklariert
        # mittels ".get()" wird der Inhalt der Textbox geholt
        vorname = self.vornameInfo.get()
        nachname = self.nachnameInfo.get()
        strasse = self.strasseInfo.get()
        plz = self.plzInfo.get()
        ort = self.ortInfo.get()
        telefonnummer = self.telefonnummerInfo.get()
        email = self.emailInfo.get()

        # Im folgenden wird PLZ, E-Mail und Telefonnummer nach der Validierung gefragt
        if not self.validatePLZ(plz):
            messagebox.showwarning("Fehler", "Ungültige PLZ. Bitte geben Sie eine 5-stellige Zahl ein.")
            # self.grab_set() => Das Hauptfenster blockieren, keine Interaktionen mit
            # dem Hauptfenster möglich solange das aktuelle Popupfenster geöffnet ist.
            self.grab_set()
            # self.waitWindow() => Das Hauptfenster so lange blockieren,
            # bis das Popupfenster geschlossen wird.
            self.waitWindow()  # solange warten bis das Popup geschlossen wird
            return

        if not self.validatEmail(email):
            messagebox.showwarning("Fehler", "Ungültige E-Mail-Adresse.")
            self.grab_set()  # das Popup blockieren
            self.waitWindow()  # # solange warten bis das Popup geschlossen wird
            return

        if not self.validateTelefonNummer(telefonnummer):
            messagebox.showwarning("Fehler",
                                   "Ungültige Telefonnummer. Erlaubt sind nur Zahlen und die Zeichen '-' oder '/'")
            self.grab_set()  # das Popup blockieren
            self.waitWindow()  # solange warten bis das Popup geschlossen wird
            return

        # Sobald die Validierung erfolgreich ist, werden die Daten gspeichert und das Popup geschlossenn
        data = [vorname, nachname, strasse, plz, ort, telefonnummer, email]

        # Die Bedingung "if self.bearbeiten": überprüft den Wert der Instanzvariablen "self.bearbeiten".
        # "self.bearbeiten" wird im Konstruktor (__init__) dieser Klasse (DialogNeuePerson) gesetzt.
        # Die Variable dient dazu um festzustellen, ob das Popup-Fenster im Modus "Bearbeiten"
        # oder im Modus "Neue Person anlegen" geöffnet wurde.
        if self.bearbeiten:
            # im Bearbeiten Modus
            selected_item = self.elternteil.tabelle.selection()
            if not selected_item:
                messagebox.showwarning("Datensatz auswählen", "Bitte wählen Sie einen Datensatz aus.")
                return

            index = self.elternteil.tabelle.index(selected_item)
            self.elternteil.tabelle.delete(selected_item)
            self.elternteil.tabelle.insert("", index, values=data)
        else:
            # Im Neu anlegen Modus
            self.elternteil.personen.append(data)  # Daten zur Liste hinzufügen
            self.elternteil.tabelle.insert("", tk.END, values=data)  # Tabelle aktualisieren

            # Datei personen.csv öffnen und Daten speichern
        with open("personen.csv", "a", newline="", encoding="utf-8-sig") as csvfile:
            csvWriter = csv.writer(csvfile)
            csvWriter.writerow(data)

        self.destroy()
