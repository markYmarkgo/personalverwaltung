import tkinter as tk
from tkinter import ttk, messagebox
import csv

from DialogNeuePerson import DialogNeuePerson


class Hauptfenster(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Personenverwaltung")
        self.geometry("1300x600")

        # Die Variablen als Attribut der Instanz zuweisen
        self.sort_reversed = {}
        self.sort_states = {}

        self.ladePersonen()
        self.erstelleMenue()
        self.erstelleTabelle()

        # folgende Zeile hinzu, um das Theme zu ändern
        style = ttk.Style(self)
        style.theme_use("clam")

        self.ladePersonen()

        # Den beimTabellenDoppelKlick-Handler an den Doppelklick auf die Tabelle binden
        self.tabelle.bind("<Double-1>", self.beimTabellenDoppelKlick)


    # Das Menü wird erstellt, hier wird "tkinter as tk" verwendet
    # Beim Aufbau hatte uns Dr. Google geholfen ;-)
    def erstelleMenue(self):
        #Menubar erzeugen
        menubar = tk.Menu(self)
        self.config(menu=menubar)
        # tearoff ist eine Eigenschaft von Menüs, bei denen Untermenüs verwendet werden.
        eintrag_menu = tk.Menu(menubar, tearoff=0)

        # Menu mit Texten versehen
        menubar.add_cascade(label="Eintrag", menu=eintrag_menu)
        eintrag_menu.add_command(label="Neu", command=self.anlegenNeuePerson)
        eintrag_menu.add_command(label="Bearbeiten", command=self.personBearbeiten)
        eintrag_menu.add_command(label="Löschen", command=self.personLoeschen)

    #Tabelle erstellen
    def erstelleTabelle(self):
        # ttk ist eine Methode von tkinter
        # ttk.Treeview ist ein Widget aus der tkinter-Bibliothek,
        # das eine tabellarische Ansicht darstellt.
        self.tabelle = ttk.Treeview(self,
                                    columns=("Vorname", "Nachname", "Straße", "PLZ", "Ort", "Telefonnummer", "E-Mail"),
                                    show="headings")
        self.tabelle.heading("Vorname", text="Vorname", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("Vorname"))
        self.tabelle.heading("Nachname", text="Nachname", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("Nachname"))
        self.tabelle.heading("Straße", text="Straße", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("Straße"))
        self.tabelle.heading("PLZ", text="PLZ", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("PLZ"))
        self.tabelle.heading("Ort", text="Ort", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("Ort"))
        self.tabelle.heading("Telefonnummer", text="Telefonnummer", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("Telefonnummer"))
        self.tabelle.heading("E-Mail", text="E-Mail", anchor=tk.CENTER, command=lambda: self.beimTabellenHeaderKlick("E-Mail"))


        # Breite und Höhe des Header-Elements anpassen
        self.tabelle.column("Vorname", anchor=tk.CENTER, width=100)
        self.tabelle.column("Nachname", anchor=tk.CENTER, width=100)
        self.tabelle.column("Straße", anchor=tk.CENTER, width=150)
        self.tabelle.column("PLZ", anchor=tk.CENTER, width=80)
        self.tabelle.column("Ort", anchor=tk.CENTER, width=100)
        self.tabelle.column("Telefonnummer", anchor=tk.CENTER, width=120)
        self.tabelle.column("E-Mail", anchor=tk.CENTER, width=150)

        self.tabelle.pack(fill=tk.BOTH, expand=True)

        # Ändere den Hintergrund der Headerspalte (Überschriftenzeile) in Grau
        self.tabelle.tag_configure("header", background="darkgrey", foreground="black")
        for col in ("Vorname", "Nachname", "Straße", "PLZ", "Ort", "Telefonnummer", "E-Mail"):
            self.tabelle.heading(col, text=col, anchor=tk.CENTER, command=lambda c=col: self.beimTabellenHeaderKlick(c))  # Klick-Event hinzufügen

    def ladePersonen(self):
        try:
            with open("personen.csv", "r", newline="", encoding="utf-8-sig") as csvfile:
                reader = csv.reader(csvfile)
                self.personen = list(reader)

                # Lösche alle Daten in der Tabelle, um eine Doppelanzeige zu vermeiden
                self.tabelle.delete(*self.tabelle.get_children())

                # Überschriften formatieren
                header = ("Vorname", "Nachname", "Straße", "PLZ", "Ort", "Telefonnummer", "E-Mail")
                for col in header:
                    self.tabelle.heading(col, text=col, anchor=tk.CENTER)
                    self.tabelle.column(col, anchor=tk.CENTER, width=100)  # Breite der Spalten anpassen

                # Daten in die Tabelle einfügen
                for row in self.personen:
                    self.tabelle.insert("", tk.END, values=row)

        except FileNotFoundError:
            print("Die Datei personen.csv wurde nicht gefunden.")
        except Exception as e:
            print(f"Ein Fehler ist aufgetreten: {e}")

    def anlegenNeuePerson(self):
        DialogNeuePerson(self)

    def personBearbeiten(self):
        # self.tabelle.selection() ermittelt eine Liste von IDs,
        # die einer ausgewählten Zeile in der Tabelle entsprechen.
        selected_item = self.tabelle.selection()

        # prüft ob ein Datensatz ausgewählt wurde.
        if not selected_item:
            messagebox.showwarning("Fehler", "Bitte wählen Sie einen Datensatz aus.")
            return

        data = self.tabelle.item(selected_item, "values")
        DialogNeuePerson(self, bearbeiten=True, personendaten=data)

    # Datensatz löschen
    def personLoeschen(self):
        # ermittelt den selektierten Datensatz
        selected_item = self.tabelle.selection()

        # Abfrage, wenn kein Datensatz ausgewählt wurde kann auch nix gelöscht werden
        if not selected_item:
            messagebox.showwarning("Fehler", "Bitte einen Datensatz auswählen.")
            return

        # Abfragen, ob der Datensatz gelöscht wurde
        result = messagebox.askquestion("Löschen bestätigen", "Wollen Sie den Datensatz wirklich löschen?")

        # Ja oder "Ok" wurde
        if result == "yes":
            index = self.tabelle.index(selected_item)
            self.tabelle.delete(selected_item)

            # Den gelöschten Datensatz aus der Liste entfernen
            self.personen.pop(index)

            # Daten in der CSV-Datei aktualisieren, dazu die Datei mit der Option "w" öffnen
            with open("personen.csv", "w", newline="", encoding='utf-8') as csvfile:
                csv_writer = csv.writer(csvfile)
                for row in self.personen:
                    csv_writer.writerow(row)  # Schreiben Sie die Liste direkt in die CSV-Datei

    def beimTabellenHeaderKlick(self, col):
        # Die Methode zum Sortieren der Tabelle nach der geklickten Spalte implementieren
        # Hier können Sie Ihren eigenen Sortieralgorithmus implementieren oder die Daten anhand der Spalte sortieren
        # Ich werde hier einfach die Daten nach der geklickten Spalte sortieren und die Tabelle aktualisieren

        # zunächst alle Daten aus der Tabelle abrufen und in Variable speichern
        data = self.tabelle.get_children("")
        # Die Variable reversed_order speichert den aktuellen Sortierzustand der Spalte.
        # self.sort_states => Der Sortierzustand wird in diesem Dictionary (self.sort_states) für jede Spalte gespeichert.
        # Solange die Spalte noch nicht sortiert wurde, wird der Standardwert False verwendet.
        # False bedeutet dass die Daten aufsteigend sortiert werden sollen.
        reversed_order = self.sort_states.get(col, False)  # Den aktuellen Sortierzustand der Spalte abrufen
        # sorted() wird verwendet, um die Daten zu sortieren. Der Parameter "key" sagt aus, nach
        # welchem Wert sortiert werden soll. Hier wird der Wert der ausgewählten Spalte für
        # jede Zeile als Schlüssel verwendet.
        data = sorted(data, key=lambda item: self.tabelle.set(item, col), reverse=reversed_order)

        # sortierte Daten einfügen
        for i in data:
            self.tabelle.move(i, "", data.index(i))

        # Aktualisiere den Sortierzustand der Spalte
        self.sort_states[col] = not reversed_order

        # Setze Sortiersymbol für die geklickte Spalte und entferne es für die anderen Spalten
        for column in self.tabelle["columns"]:
            if column == col:
                sort_symbol = " ▼" if reversed_order else " ▲" # Hinzufügen
            else:
                sort_symbol = "" # Entfernen
            self.tabelle.heading(column, text=column + sort_symbol, anchor=tk.CENTER)


    # Python erkennt den Doppelklick durch den event-Handler, der im Konstruktor
    # deklariert wurde:
    # self.tabelle.bind("<Double-1>", self.beimTabellenDoppelKlick)
    def beimTabellenDoppelKlick(self, event):
        selected_item = self.tabelle.selection()
        if not selected_item:
            return

        data = self.tabelle.item(selected_item, "values")
        # ruft das Popup auf
        DialogNeuePerson(self, bearbeiten=True, personenDaten=data)


if __name__ == "__main__":
    app = Hauptfenster()
    app.mainloop()
